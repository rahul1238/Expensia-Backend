spring.application.name=backend

# Externalized sensitive settings (set via environment variables or JVM -D properties)
# MongoDB: export MONGODB_URI='mongodb+srv://<user>:<pass>@<host>/<db>?retryWrites=true&w=majority'
spring.data.mongodb.uri=${MONGODB_URI:}

# Server
server.port=${SERVER_PORT:8080}

# JWT (DO NOT commit real secrets)  e.g. export JWT_SECRET=base64-encoded-secret
jwt.secret=${JWT_SECRET:change-me-in-env}
jwt.access-token.expiration=${JWT_ACCESS_EXP:3600000}
jwt.refresh-token.expiration=${JWT_REFRESH_EXP:604800000}

spring.jackson.serialization.indent_output=true

# Google OAuth2 (values must be provided via environment; leaving blank avoids push protection)
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:}
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

app.oauth2.authorized-redirect-uris=${OAUTH2_REDIRECT_URIS:http://localhost:5173/auth/callback}

